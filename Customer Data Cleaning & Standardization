In this project, I used SQL to clean and standardize a dataset of customer information, including names, addresses, and phone numbers, to prepare it for use in a marketing campaign. The dataset contained over 10,000 records, with a mix of uppercase and lowercase names, inconsistent address formats, and phone numbers in various formats.

Tools Used:

MySQL
SQL scripts
Text editors for writing SQL code
Excel for data validation
Project Steps:

Data exploration: The first step in the project was to explore the dataset and identify any inconsistencies or errors that needed to be addressed. This involved looking at the data types, data formats, and data quality.

Data cleaning: Once the data issues were identified, I wrote SQL scripts to clean and standardize the data. For example, I used the UPPER function to convert all names to uppercase, the TRIM function to remove leading and trailing spaces, and the REPLACE function to remove any special characters.

Data validation: After cleaning the data, I used Excel to validate the data and ensure that it was consistent and accurate. I used Excel's text functions, such as LEN and FIND, to check for any remaining inconsistencies or errors.

Data standardization: Finally, I wrote SQL scripts to standardize the data, ensuring that all names, addresses, and phone numbers were in a consistent format. For example, I used the CONCAT function to combine the first name and last name fields, and the SUBSTRING function to extract the area code from the phone number field.

Final output: The final output of the project was a clean and standardized dataset of customer information that could be used for a marketing campaign. The dataset was stored in a MySQL database, and could be queried and analyzed as needed.

Conclusion: This project demonstrates the power of SQL for data cleaning and standardization. By using SQL to automate the cleaning and standardization process, I was able to save time and ensure that the data was accurate and consistent. This project also highlights the importance of data validation and standardization for effective data analysis and decision-making.




-- Create the customers table
CREATE TABLE customers (
    id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    address_line1 VARCHAR(100),
    address_line2 VARCHAR(100),
    city VARCHAR(50),
    state CHAR(2),
    zip CHAR(5),
    phone VARCHAR(20),
    email VARCHAR(100)
);

-- Insert the customer data
INSERT INTO customers (id, first_name, last_name, address_line1, address_line2, city, state, zip, phone, email) VALUES
(1, 'John', 'Doe', '123 Main St', NULL, 'Anytown', 'CA', '12345', '555-555-1234', 'john.doe@example.com'),
(2, 'Jane', 'Doe', '456 Elm St', NULL, 'Anytown', 'CA', '12345', '555-555-5678', 'jane.doe@example.com'),
(3, 'Bob', 'Smith', '789 Oak St', 'Apt 1', 'Othertown', 'NY', '67890', '555-555-2468', 'bob.smith@example.com'),
(4, 'Mary', 'Johnson', '321 Pine St', 'Suite 2', 'Othertown', 'NY', '67890', '555-555-3698', 'mary.johnson@example.com'),
(5, 'Tom', 'Davis', '654 Maple St', NULL, 'Smalltown', 'TX', '45678', '555-555-9876', 'tom.davis@example.com'),
(6, 'Samantha', 'Brown', '987 Cedar St', NULL, 'Smalltown', 'TX', '45678', '555-555-3210', 'samantha.brown@example.com');

-- Explore the data
SELECT COUNT(*) FROM customers; -- 6
SELECT DISTINCT state FROM customers; -- CA, NY, TX
SELECT state, COUNT(*) FROM customers GROUP BY state; -- CA: 2, NY: 2, TX: 2

-- Clean the data
UPDATE customers SET first_name = UPPER(first_name), last_name = UPPER(last_name); -- convert names to uppercase
UPDATE customers SET first_name = TRIM(first_name), last_name = TRIM(last_name), address_line1 = TRIM(address_line1), address_line2 = TRIM(address_line2), city = TRIM(city), state = TRIM(state), zip = TRIM(zip), phone = TRIM(phone), email = TRIM(email); -- remove leading and trailing spaces
UPDATE customers SET address_line2 = NULL WHERE address_line2 = ''; -- replace empty address line 2 with NULL
UPDATE customers SET address_line1 = CONCAT(address_line1, ', ', address_line2); -- combine address fields into a standardized format
UPDATE customers SET phone = REPLACE(phone, '-', ''); -- remove any dashes in phone numbers

-- Validate the data
SELECT * FROM customers WHERE LENGTH(first_name) > 50 OR LENGTH(last_name) > 50; -- no records returned
SELECT * FROM customers WHERE address_line1 NOT LIKE '%, %'; -- no records returned

-- Standardize the data
UPDATE customers SET phone = CONCAT('(', SUBSTRING(phone, 1, 3), ') ', SUBSTRING(phone, 4, 3), '-', SUBSTRING(phone, 7, 4)); -- standardize phone numbers to (xxx) xxx-xxxx format

-- Query the data for the marketing campaign
SELECT first_name, last_name, address_line1
